{"expireTime":9007200890373131000,"key":"gatsby-plugin-mdx-entire-payload-1dda7d3d8ab11207f30884820982a4b4--undefined","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { x } from '@xstyled/styled-components'\nimport { Article, ScreenContainer, Button } from '../components'\nimport { Link } from 'gatsby'\nimport notFoundImageURL from '../images/404.png'","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":5,"column":49,"offset":191},"indent":[1,1,1]}},{"type":"jsx","value":"<Article style={{ textAlign: 'center', overflow: 'hidden' }}>\n  <ScreenContainer mt={5} position=\"relative\">\n    <x.h1 m={0}>There's a leak in the website.</x.h1>\n    <x.img\n      alt=\"Leak illustration\"\n      src={notFoundImageURL}\n      w={500}\n      h=\"auto\"\n      mx=\"auto\"\n      my={5}\n    />\n    <x.p my={3} mx=\"auto\" fontSize=\"1.5em\">\n      The page you are looking for does not actually exist.\n    </x.p>\n    <div>\n      <Button as={Link} to=\"/\">\n        Back to home\n      </Button>\n    </div>\n  </ScreenContainer>\n</Article>","position":{"start":{"line":7,"column":1,"offset":193},"end":{"line":27,"column":11,"offset":727},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Page not found\"}","position":{"start":{"line":30,"column":1,"offset":730},"end":{"line":30,"column":55,"offset":784},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":30,"column":55,"offset":784}}},"scopeImports":["import { x } from '@xstyled/styled-components'","import { Article, ScreenContainer, Button } from '../components'","import { Link } from 'gatsby'","import notFoundImageURL from '../images/404.png'","import * as React from 'react'"],"scopeIdentifiers":["x","Article","ScreenContainer","Button","Link","notFoundImageURL","React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Page not found\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Article, {\n    style: {\n      textAlign: 'center',\n      overflow: 'hidden'\n    },\n    mdxType: \"Article\"\n  }, mdx(ScreenContainer, {\n    mt: 5,\n    position: \"relative\",\n    mdxType: \"ScreenContainer\"\n  }, mdx(x.h1, {\n    m: 0\n  }, \"There's a leak in the website.\"), mdx(x.img, {\n    alt: \"Leak illustration\",\n    src: notFoundImageURL,\n    w: 500,\n    h: \"auto\",\n    mx: \"auto\",\n    my: 5\n  }), mdx(x.p, {\n    my: 3,\n    mx: \"auto\",\n    fontSize: \"1.5em\"\n  }, \"The page you are looking for does not actually exist.\"), mdx(\"div\", null, mdx(Button, {\n    as: Link,\n    to: \"/\",\n    mdxType: \"Button\"\n  }, \"Back to home\")))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { x } from '@xstyled/styled-components'\nimport { Article, ScreenContainer, Button } from '../components'\nimport { Link } from 'gatsby'\nimport notFoundImageURL from '../images/404.png'\nexport const _frontmatter = {\n  \"title\": \"Page not found\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Article style={{\n      textAlign: 'center',\n      overflow: 'hidden'\n    }} mdxType=\"Article\">\n  <ScreenContainer mt={5} position=\"relative\" mdxType=\"ScreenContainer\">\n    <x.h1 m={0}>There's a leak in the website.</x.h1>\n    <x.img alt=\"Leak illustration\" src={notFoundImageURL} w={500} h=\"auto\" mx=\"auto\" my={5} />\n    <x.p my={3} mx=\"auto\" fontSize=\"1.5em\">\n      The page you are looking for does not actually exist.\n    </x.p>\n    <div>\n      <Button as={Link} to=\"/\" mdxType=\"Button\">\n        Back to home\n      </Button>\n    </div>\n  </ScreenContainer>\n    </Article>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}